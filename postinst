#!/usr/bin/env python3

__version__ = "2023.04.01"

import logging
import re
import subprocess
import sys
from argparse import ArgumentParser
from configparser import ConfigParser
from functools import partial
from itertools import filterfalse, tee
from pathlib import Path
from urllib.parse import urljoin

DRY_RUN = False
ECHO = False
RELEASE = None
DESKTOP = None


########################################################
#                                                      #
#   DIRECTORIES                                        #
#                                                      #
########################################################


THIS_DIR = Path(__file__).parent
PATCHES_DIR = THIS_DIR / "patches"
SCRIPTS_DIR = THIS_DIR / "scripts"
DESKTOP_DIR = THIS_DIR / "desktop"
DOWNLOADS_DIR = THIS_DIR / "DOWNLOADS"

INST_DIR = Path("/usr")
EXEC_DIR = INST_DIR / "bin"
MENU_DIR = INST_DIR / "share" / "applications"
ICON_DIR = INST_DIR / "share" / "icons"
OPT_DIR = Path("/opt")

APT_DIR = Path("/etc/apt")
APT_SRC_DIR = APT_DIR / "sources.list.d"
APT_GPG_DIR = APT_DIR / "trusted.gpg.d"


########################################################
#                                                      #
#   UTILITY FUNCTIONS                                  #
#                                                      #
########################################################


def get_release():
    process = subprocess.run("lsb_release -cs", shell=True, capture_output=True)
    return process.stdout.decode().strip()


def partition(f, xs):
    t1, t2 = tee(xs)
    return list(filter(f, t1)), list(filterfalse(f, t2))


def yes_no(task_desc, default="y"):
    choices = "Y/n/q" if default.lower() == "y" else "y/N/q"
    prompt = f"Do you want to {task_desc} ({choices})? "
    response = input(prompt).strip().lower()
    if response == "":
        response = default.lower()
    if response in {"q", "quit"}:
        sys.exit()
    return response in {"y", "yes"}


def run(command, *, sudo=False):
    if sudo:
        command = f"sudo {command}"
    logging.info(f"{command}")
    if DRY_RUN:
        return
    process = subprocess.run(command, shell=True, capture_output=not ECHO)
    if process.returncode != 0:
        raise RuntimeError(process.stderr if not ECHO else "")


def contains(pattern, files):
    process = subprocess.run(f"grep -q '{pattern}' {files}", shell=True)
    return process.returncode == 0


def cat(path, content, *, append=False, mode=None, sudo=False):
    command1 = f"echo {content}"
    command2 = f"tee {path}" if not append else f"tee -a {path}"
    if sudo:
        command2 = f"sudo {command2}"
    run(f"{command1} | {command2} > /dev/null")
    if (not append) and (mode is not None):
        run(f"chmod {mode} {path}", sudo=sudo)


def patch(orig, diff, *, strip=None, sudo=False):
    command1 = f"zcat {diff}"
    command2 = f"patch {orig}" if not Path(orig).is_dir() else f"patch -d {orig}"
    if strip is not None:
        command2 = f"{command2} -p {strip}"
    if sudo:
        command2 = f"sudo {command2}"
    run(f"{command1} | {command2}")


def copy(src, dst, *, move=False, link=False, mode=None, sudo=False):
    if move:
        run(f"mv {src} {dst}", sudo=sudo)
    elif link:
        run(f"ln -s {src} {dst}", sudo=sudo)
    else:
        run(f"cp {src} {dst}", sudo=sudo)
    if (not link) and (mode is not None):
        run(f"chmod {mode} {dst}", sudo=sudo)


def extract(archive, dst, *, sudo=False):
    command = f"tar -x --no-same-owner -C {dst} --file {archive}"
    run(command, sudo=sudo)


def fetch(url, dst, *, gpg=False, mode=None, sudo=False):
    command1 = f"curl -sSL {url}"
    command2 = f"tee {dst} > /dev/null"
    if sudo:
        command2 = f"sudo {command2}"
    if gpg:
        run(f"{command1} | gpg --dearmor | {command2}")
    else:
        run(f"{command1} | {command2}")
    if mode is not None:
        run(f"chmod {mode} {dst}", sudo=sudo)


def urlread(url):
    p = subprocess.run(["curl", url], capture_output=True)
    return p.stdout.decode()


def local_version(executable, prefix=""):
    try:
        p = subprocess.run([executable, "--version"], capture_output=True)
        return p.stdout.decode().splitlines()[0].strip().split(" ")[-1][len(prefix):]
    except FileNotFoundError:
        return None


########################################################
#                                                      #
#   PACKAGE FUNCTIONS                                  #
#                                                      #
########################################################


def installed(package):
    command = "dpkg-query -W -f='${Status}' " + package
    process = subprocess.run(command, shell=True, capture_output=True)
    return b"install ok installed" in process.stdout


def package_version(package):
    command = "dpkg-query -W " + package
    process = subprocess.run(command, shell=True, capture_output=True)
    output = process.stdout.strip().decode()
    if "no packages found" in output:
        return None
    return output.split("\t")[-1]


def install(packages):
    exclude, include = partition(installed, packages)
    if len(exclude) > 0:
        logging.info(f"   -- already installed: {' '.join(exclude)}")
    if len(include) == 0:
        logging.info("   -- nothing to install")
    else:
        run(f"apt install --no-install-recommends {' '.join(include)}", sudo=True)


def uninstall(packages):
    include, exclude = partition(installed, packages)
    if len(exclude) > 0:
        logging.info(f"   -- already not installed: {' '.join(exclude)}")
    if len(include) == 0:
        logging.info("   -- nothing to uninstall")
    else:
        run(f"apt purge --auto-remove {' '.join(include)}", sudo=True)


def add_apt_repo(package, repo, *, repo_key=None):
    if repo_key is not None:
        logging.info(f"   -- ADDING REPOSITORY KEY: {repo_key}")
        key_file = APT_GPG_DIR / f"{package}.gpg"
        if key_file.exists():
            logging.info("   -- already added")
        else:
            fetch(repo_key, key_file, gpg=True, mode="644", sudo=True)

    logging.info(f"   -- ADDING REPOSITORY: {repo}")
    if repo.startswith("ppa:"):
        repo_name = repo.split("ppa:")[1]
        if contains(repo_name, f"{APT_SRC_DIR}/*"):
            logging.info("   -- already added")
        else:
            run(f"add-apt-repository -P {repo}", sudo=True)
    elif repo.startswith("deb "):
        repo_name = repo[repo.find("http"):]
        if contains(repo_name, f"{APT_SRC_DIR}/*"):
            logging.info("   -- already added")
        else:
            list_file = f"{APT_SRC_DIR}/{package}.list"
            cat(list_file, repo, mode="644", sudo=True)
            refresh()


def add_alternative(generic, name, path, priority):
    run(f"update-alternatives --install {generic} {name} {path} {priority}", sudo=True)


########################################################
#                                                      #
#   TASKS                                              #
#                                                      #
########################################################


def refresh():
    logging.info("-- UPDATING PACKAGE DATA")
    run("apt update", sudo=True)


def upgrade():
    logging.info("-- UPGRADING PACKAGES")
    run("apt upgrade", sudo=True)


def install_category(category):
    logging.info(f"-- INSTALLING CATEGORY: {category.name.upper()}")
    packages = category.get("all", "").split()
    if category.getboolean("desktop", False):
        packages.extend(category.get(DESKTOP, "").split())
    install(packages)


def uninstall_category(category):
    logging.info(f"-- UNINSTALLING CATEGORY: {category.name.upper()}")
    packages = category.get("all", "").split()
    if category.getboolean("desktop", False):
        packages.extend(category.get(DESKTOP, "").split())
    uninstall(packages)


def install_external(package):
    logging.info(f"-- INSTALLING EXTERNAL PACKAGE: {package.name.upper()}")
    repo = package.get("repo", None)
    if repo is None:
        repo = package.get(f"repo.{RELEASE}", None)
    if repo is None:
        logging.info("-- repository information missing")
        return
    key = package.get("key", None)
    if key is None:
        key = package.get(f"key.{RELEASE}", None)
    add_apt_repo(package.name, repo, repo_key=key)
    packages = package.get("all", package.name).split()
    install(packages)


def install_file(package):
    logging.info(f"-- INSTALLING FILE PACKAGE: {package.name.upper()}")

    prereqs = [p for p in package.get("all", "").split() if p != package.name]
    if len(prereqs) > 0:
        install(prereqs)

    page = package["page"]
    content = urlread(page)

    matched = re.search(package["regex"], content)
    route, *middle, latest = matched.groups()
    if package_version(package.name) == latest:
        logging.info("   -- already installed")
    else:
        template = package.get("template", route)
        url = template % {"release": latest}
        if not url.startswith("http"):
            url = urljoin(page, url)
        if len(middle) == 0:
            filename = url.split("/")[-1]
        else:
            filename = middle[0]
        downloaded = DOWNLOADS_DIR / filename
        if not downloaded.exists():
            fetch(url, dst=downloaded)
        run(f"apt install --no-install-recommends {downloaded}", sudo=True)


########################################################
#                                                      #
#   SPECIAL TASKS                                      #
#                                                      #
########################################################


def install_tr_keymaps():
    xkb_dir = Path("/usr/share/X11/xkb")
    xkb_tr = xkb_dir / "symbols" / "tr"

    logging.info("   -- CHANGING KEYMAP: TR (SLASH)")
    if contains("AB10.*slash", xkb_tr):
        logging.info("   -- already changed")
    else:
        patch(xkb_tr, PATCHES_DIR / "xkb-tr-slash.patch.gz", sudo=True)

    logging.info("   -- ADDING KEYMAP: TR(TYPEWRITER)")
    if contains("typewriter", xkb_tr):
        logging.info("   -- already added")
    else:
        patch(xkb_dir, PATCHES_DIR / "xkb-tr-typewriter.patch.gz", strip=1, sudo=True)


def install_natural_scrolling():
    logging.info("   -- SETTING NATURAL SCROLLING")
    conf_file = Path("/usr/share/X11/xorg.conf.d/40-libinput.conf")
    if contains("NaturalScrolling", conf_file):
        logging.info("   -- already set")
    else:
        patch(conf_file, PATCHES_DIR / "libinput.conf.patch.gz", sudo=True)


def postinstall_fontconfig_infinality():
    logging.info("   -- SETTING INFINALITY FONTCONFIG STYLE")
    # FIXME: repeated setstyle
    run("echo 3 | sudo /etc/fonts/infinality/infctl.sh setstyle")


def postinstall_typecatcher():
    logging.info("   -- FIXING TYPECATCHER")
    builder_file = Path("/usr/lib/python3/dist-packages/typecatcher_lib/Builder.py")
    if not contains("tree.getiterator", builder_file):
        logging.info("   -- already fixed")
    else:
        run(f"sed -i 's/tree.getiterator/tree.iter/' {builder_file} > /dev/null", sudo=True)


def install_hosts():
    logging.info("   -- INSTALLING HOSTS BLACKLIST")
    cron_file = Path("/etc/cron.daily/update-hosts")
    if cron_file.exists():
        logging.info("   -- already installed")
    else:
        install(["python3-lxml", "python3-bs4"])
        copy(SCRIPTS_DIR / "update-hosts", cron_file, mode="755", sudo=True)
    if not Path("/var/local/hosts").exists():
        run(cron_file, sudo=True)


def install_tor():
    logging.info("   -- INSTALLING TOR with TINYPROXY")
    install(["tor", "tinyproxy"])
    config = Path("/etc/tinyproxy/tinyproxy.conf")
    restart = False
    if not contains('^upstream socks5', config):
        cat(config, "upstream socks5 127.0.0.1:9050", append=True, sudo=True)
        restart = True
    if not contains('^LogFile "/dev/null"', config):
        run(f"sed -i 's|^LogFile .*|LogFile \"/dev/null\"|' {config}", sudo=True)
        restart = True
    if restart:
        run("systemctl restart tinyproxy", sudo=True)


def install_palemoon(priority=100):
    logging.info("   -- INSTALLING PALE MOON")
    base_url = "https://linux.palemoon.org/"
    content = urlread(base_url + "download/mainline/")
    matched = re.search(r'href="(.*/(palemoon-([0-9.]+)\.linux-x86_64-gtk3\.tar\.xz))"', content)
    route, filename, latest = matched.groups()

    app_dir = OPT_DIR / "palemoon"
    if app_dir.exists():
        if local_version(app_dir / "palemoon") != latest:
            logging.info("   -- old version, removing")
            run(f"rm -rf {app_dir}", sudo=True)
        else:
            logging.info("   -- already extracted")

    if not app_dir.exists():
        downloaded = DOWNLOADS_DIR / filename
        if not downloaded.exists():
            fetch(f"{base_url}{route}", dst=downloaded)
        extract(downloaded, app_dir.parent, sudo=True)

    executable = EXEC_DIR / "palemoon"
    if not executable.exists():
        copy(app_dir / "palemoon", executable, link=True, sudo=True)
        add_alternative("/usr/bin/x-www-browser", "x-www-browser", executable, priority)

    icon_file = ICON_DIR / "palemoon.png"
    if not icon_file.exists():
        copy(app_dir / "browser" / "icons" / "mozicon128.png", icon_file, link=True, sudo=True)

    menu_file = MENU_DIR / "palemoon.desktop"
    if not menu_file.exists():
        copy(DESKTOP_DIR / "palemoon.desktop", menu_file, sudo=True)


def install_ungoogled_chromium(priority=200):
    logging.info("   -- INSTALLING UNGOOGLED CHROMIUM")
    base_url = "https://ungoogled-software.github.io/ungoogled-chromium-binaries/"
    content = urlread(base_url)
    matched = re.search(r"/(releases/linux_portable/64bit/([0-9.]+)(-[0-9]+)?)", content)
    route, latest, _ = matched.groups()

    app_dir = OPT_DIR / "ungoogled-chromium"
    if app_dir.exists():
        if local_version(app_dir / "chrome") != latest:
            logging.info("   -- old version, removing")
            run(f"rm -rf {app_dir}", sudo=True)
        else:
            logging.info("   -- already extracted")

    if not app_dir.exists():
        content = urlread(f"{base_url}{route}")
        matched = re.search(r'href="(https://.*/(ungoogled-chromium.*\.tar\.xz))"', content)
        url, filename = matched.groups()
        downloaded = DOWNLOADS_DIR / filename
        if not downloaded.exists():
            fetch(url, dst=downloaded)
        extract(downloaded, app_dir.parent, sudo=True)
        run(f"mv {app_dir}* {app_dir}", sudo=True)

    executable = EXEC_DIR / "chromium"
    if not executable.exists():
        # install_appimage("ungoogled-chromium", executable)
        copy(app_dir / "chrome", executable, link=True, sudo=True)
        add_alternative("/usr/bin/x-www-browser", "x-www-browser", executable, priority)

    icon_file = ICON_DIR / "chromium.png"
    if not icon_file.exists():
        copy(app_dir / "product_logo_48.png", icon_file, link=True, sudo=True)

    menu_file = MENU_DIR / "chromium.desktop"
    if not menu_file.exists():
        copy(DESKTOP_DIR / "ungoogled-chromium.desktop", menu_file, sudo=True)


def postinstall_dropbox():
    logging.info("   -- FIXING DROPBOX REPO DATA")
    apt_file = APT_SRC_DIR / "dropbox.list"
    if apt_file.exists() and contains('^deb', apt_file):
        run(f"sed -i 's/^deb/# deb/' {apt_file}", sudo=True)


def install_wormhole_william():
    logging.info("   -- INSTALLING WORMHOLE WILLIAM")
    url = "https://github.com/psanford/wormhole-william"
    content = urlread(url)
    matched = re.search(r"/releases/tag/v([0-9.]+)", content)
    latest = matched.group(1)

    executable = EXEC_DIR / "wormhole-william"
    if local_version(executable, prefix="v") == latest:
        logging.info("   -- already installed")
    else:
        url = f"{url}/releases/download/v{latest}/wormhole-william-linux-amd64"
        downloaded = DOWNLOADS_DIR / f"wormhole-william-{latest}"
        if not downloaded.exists():
            fetch(url, dst=downloaded, mode="755")
        copy(downloaded, executable, mode="755", sudo=True)


def install_youtube_dl():
    logging.info("   -- INSTALLING YOUTUBE-DL")
    executable = EXEC_DIR / "youtube-dl"
    if executable.exists():
        logging.info("   -- already installed, checking for updates")
        run("youtube-dl -U", sudo=True)
    else:
        url = "https://yt-dl.org/downloads/latest/youtube-dl"
        fetch(url, dst=executable, mode="755", sudo=True)


def install_split2flac():
    logging.info("   -- INSTALLING SPLIT2FLAC")
    url = "https://raw.githubusercontent.com/ftrvxmtrx/split2flac/master/split2flac"
    content = urlread(url)
    matched = re.search(r"VERSION=([0-9]+)", content)
    latest = matched.group(1)
    downloaded = DOWNLOADS_DIR / f"split2flac-{latest}"
    if not downloaded.exists():
        # TODO: don't fetch a second time
        fetch(url, downloaded, mode="755")

    executable = EXEC_DIR / "split2flac"
    if local_version(executable) == latest:
        logging.info("   -- already installed")
    else:
        copy(downloaded, executable, mode="755", sudo=True)
    split2mp3 = executable.with_name("split2mp3")
    if not split2mp3.exists():
        copy(executable, split2mp3, link=True, sudo=True)


def install_yq():
    logging.info("   -- INSTALLING YQ")
    url = "https://github.com/mikefarah/yq"
    content = urlread(url)
    matched = re.search(r"/releases/tag/v([0-9.]+)", content)
    latest = matched.group(1)

    executable = EXEC_DIR / "yq"
    if local_version(executable, prefix="v") == latest:
        logging.info("   -- already installed")
    else:
        url = f"{url}/releases/download/v{latest}/yq_linux_amd64"
        downloaded = DOWNLOADS_DIR / f"yq-{latest}"
        if not downloaded.exists():
            fetch(url, dst=downloaded, mode="755")
        copy(downloaded, executable, mode="755", sudo=True)


def postinstall_code():
    logging.info("   -- FIXING VISUAL STUDIO CODE REPO DATA")
    gpg_file = APT_GPG_DIR / "code.gpg"
    if gpg_file.exists():
        run(f"rm -f {gpg_file}", sudo=True)
    list_file = APT_SRC_DIR / "code.list"
    if list_file.exists():
        run(f"rm -f {list_file}", sudo=True)
        refresh()


########################################################
#                                                      #
#   MAIN                                               #
#                                                      #
########################################################


def make_parser(task_names):
    parser = ArgumentParser(prog="postinst")
    parser.add_argument("--version", action="version", version=__version__)
    parser.add_argument("-x", "--desktop", help="desktop environment",
                        choices=["lxqt", "xfce"])
    parser.add_argument("-r", "--release", help="release", choices=["jammy"])
    parser.add_argument("--refresh", action="store_true")
    parser.add_argument("--dry-run", action="store_true", dest="dry_run")
    parser.add_argument("-e", "--echo", action="store_true")
    parser.add_argument("tasks", nargs="*",
                        help="task(s) to execute: " + ",".join(task_names))
    return parser


# Ubuntu: set server: main server (not "server for Turkey")
# Mint: update manager preferences: don't offer local repositories


def main():
    global DRY_RUN
    global ECHO
    global RELEASE
    global DESKTOP

    logging.basicConfig(level=logging.INFO, format="")

    config = ConfigParser()
    config.read("tasks.ini")

    sectioned_tasks = {
        "install_category",
        "install_external",
        "install_file",
        "uninstall_category",
    }

    all_tasks = {}
    for section in config.sections():
        action = config[section]["action"]
        if action in sectioned_tasks:
            all_tasks[section] = partial(globals().get(action), config[section])
        else:
            all_tasks[section] = globals().get(action)

    parser = make_parser(all_tasks)
    arguments = parser.parse_args(sys.argv[1:])

    DRY_RUN = arguments.dry_run
    ECHO = arguments.echo

    RELEASE = arguments.release or get_release()
    DESKTOP = arguments.desktop

    if any(t not in all_tasks for t in arguments.tasks):
        print("unknown task", file=sys.stderr)
        sys.exit()

    tasks = set(arguments.tasks)
    if len(tasks) == 0:
        tasks = {t for t in all_tasks if not config[t].getboolean("disabled", False)}

    needs_desktop = {c for c in all_tasks if config[c].getboolean("desktop", False)}
    if (len(tasks.intersection(needs_desktop)) > 0) and (arguments.desktop is None):
        print("this mode requires a desktop argument", file=sys.stderr)
        parser.print_usage()
        sys.exit()

    if arguments.refresh:
        refresh()

    for task, handler in all_tasks.items():
        if task in tasks:
            task_desc = config[task].get("desc", f"install {task}")
            if (task not in arguments.tasks) and (not yes_no(task_desc)):
                continue

            prehook = globals().get(f"preinstall_{task.replace('-', '_')}")
            if prehook is not None:
                prehook()

            handler()

            posthook = globals().get(f"postinstall_{task.replace('-', '_')}")
            if posthook is not None:
                posthook()

    if arguments.refresh:
        upgrade()


if __name__ == "__main__":
    main()
